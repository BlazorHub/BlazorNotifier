@using System.Collections.Specialized
@using BlazorNotifier.Classes
@using System.Collections.ObjectModel
@inject BlazorNotifierClientService Notifi
<div class="notification-area">
            @foreach (var message in Notifi.ProgressMessages)
            {
                <BlazorNotifier.Components.NotifierProgress Id="@message.Id" Title="@message.Title" Message="@message.Message" OnCloseClick="@CloseProgress"/>

            }
            @foreach (var message in Notifi.Notifications)
            {
                <BlazorNotifier.Components.NotifierMessage Id="@message.Id" Title="@message.Title" Type="@message.Type" OnCloseClick="@CloseMessage"/>
            }
        <div id="26" class="notification__message message--success" >
            <h1>Type 2</h1>
            <p>Титул сообщения 2 as as dasd asd das dsad as dasd asd asd as ddsdas</p>
            <button aria-labelledby="button-dismiss-26">
                <span id="button-dismiss-26" hidden>Dismiss</span >
                <svg viewBox="0 0 100 100" width="10" height="10">
                    <g stroke="currentColor" stroke-width="6" stroke-linecap="round" stroke-linejoin="round" fill="none">
                        <g transform="translate(50 50) rotate(45)"><path d="M 0 -30 v 60 z M -30 0 h 60"></path></g>
                    </g>
                </svg>
            </button >
        </div>
</div>
@code
{
    void CloseProgress(Guid id)
    {
        var message = Notifi.ProgressMessages.FirstOrDefault(m => m.Id == id);
        if(message is null)
            return;
        Notifi.ProgressMessages.Remove(message);
        StateHasChanged();
    } 
    void CloseMessage(Guid id)
    {
        var message = Notifi.Notifications.FirstOrDefault(m => m.Id == id);
        if(message is null)
            return;
        Notifi.Notifications.Remove(message);
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        Notifi.OnProgressChange += StateHasChanged;
    }


}